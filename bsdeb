#!/bin/bash

# exit script immediately on non-zero status
set -e

PROGRAM_NAME="Debian Bootstrapper"
PROGRAM_VERSION="1.0.0-SNAPSHOT"
DEBIAN_VERSION=12.2
REPO_SOURCE_URL="https://github.com/genebarker/debian/raw/master"
SCRIPT_FILENAME="$(basename ${BASH_SOURCE})"
BASE_DIR="$(dirname ${BASH_SOURCE})"
CONFIG_FILENAME="server.conf"
CONFIG_FILEPATH="${BASE_DIR}/${CONFIG_FILENAME}"
BOOTSTRAP=OFF
AUTO_YES=OFF

HELP=$(cat << EOF
NAME
    ${SCRIPT_FILENAME} - a Debian server bootstrapper

SYNOPSIS
    ${SCRIPT_FILENAME} [-bhy] [-f configfile]

DESCRIPTION
    Bootstrap a new Debian server using a configuration file.

    Given a freshly installed headless Debian ${DEBIAN_VERSION}
    server, this script configures it using the settings found in
    the configuration file.

OPTIONS
    -b              Bootstrap server
    -f configfile   Configuration file, default: ${CONFIG_FILENAME}
    -h              Display this help
    -y              Answer yes to confirmation messages
EOF
)

run_main()
{
    display_script_header
    parse_script_options $@

    verify_bootstrap_selected
    verify_and_load_config_file
    verify_debian_version

    upgrade_debian_image_to_latest
    install_vim_and_set_as_default
    install_remote_access_utils
    install_windows_integration_utils
    install_core_dev_utils
    configure_ssh_server

    load_and_install_dotfiles
    gen_ssh_keys_and_set_auth_user

    run_config_file_script
}

display_script_header()
{
    echo "${PROGRAM_NAME} for Debian ${DEBIAN_VERSION}"
    echo "Version ${PROGRAM_VERSION} - MIT License"
    echo
}

parse_script_options()
{
    echo ".. parsing script options"
    while getopts ':bf:yh' opt
    do
        case "$opt" in
            b)
                BOOTSTRAP=ON
                ;;
            f)
                override_config_file "$OPTARG"
                ;;
            y)
                AUTO_YES=ON
                ;;
            h)
                show_help
                exit 0
                ;;
            :)
                show_error "Option requires an argument."
                exit 1
                ;;
            ?)
                show_error "Invalid command option."
                exit 1
                ;;
        esac
    done

    # remove getopts parms from parameter list
    shift $((OPTIND-1))
}

override_config_file()
{
    CONFIG_FILEPATH=$1
    CONFIG_FILENAME=$(basename "$CONFIG_FILEPATH")
    if [ ! -f $1 ]
    then
        echo "Config file (${CONFIG_FILENAME}) not found, will try to download from repo."
    fi
}

show_help()
{
    echo
    echo "${HELP}"
}

show_error()
{
    local message=$1
    echo
    echo "ERROR: $1"
}

verify_bootstrap_selected()
{
    if [ $BOOTSTRAP = OFF ]
    then
        echo
        echo "Exiting since bootstrap option not used."
        exit 0
    fi
}

verify_and_load_config_file()
{
    if [ ! -f "$CONFIG_FILEPATH" ]
    then
        get_config_file_from_repo_and_exit $CONFIG_FILENAME
    fi
    echo ".. config file set ($CONFIG_FILEPATH)"
    echo ".. displaying config"
    echo
    cat $CONFIG_FILEPATH
    question="Is this the correct config to apply (y/n)?"
    ask_continue_question "$question"
    source $CONFIG_FILEPATH
    echo ".. config file loaded"
}

get_config_file_from_repo_and_exit()
{
    local filename=$1
    download_config_file $filename
    echo -n "Update config file ${filename} with your settings, "
    echo "then rerun this script."
    exit 1
}

download_config_file()
{
    echo ".. downloading config file from repo"
    wget ${REPO_SOURCE_URL}/$1
    echo ".. config file download successful"
}

ask_continue_question()
{
    local question=$1
    echo
    echo -n "$question "
    if [ $AUTO_YES = ON ]
    then
        echo Yes
        return
    fi
    old_stty_cfg=$(stty -g)
    stty raw -echo ; answer=$(head -c 1) ; stty $old_stty_cfg
    if echo "$answer" | grep -iq "^y"
    then
        echo Yes
        return
    else
        echo No
        exit 1
    fi
}

verify_debian_version()
{
    if [ -f /etc/debian_version ]
    then
        version=$(cat /etc/debian_version)
        echo ".. identified version of Debian image ($version)"
    else
        version="UNKNOWN"
    fi
    if [ "$version" != "$DEBIAN_VERSION" ]
    then
        question=$(cat << EOF
WARNING: The version of this Debian image ($version) does NOT match
the script target ($DEBIAN_VERSION).

Do you still want to bootstrap this image (y/n)?
EOF
        )
        ask_continue_question "$question"
        echo
    fi
}

upgrade_debian_image_to_latest()
{
    echo ".. upgrading Debian image to latest available"
    apt-get update && apt-get -y dist-upgrade
}

install_vim_and_set_as_default()
{
    echo ".. installing vim and setting as default editor"
    apt-get -y install vim
    update-alternatives --set editor /usr/bin/vim.basic
    echo ".. installing curl (needed by vim-plug)"
    apt-get -y install curl
}

install_remote_access_utils()
{
    echo ".. installing remote access utilities"
    apt-get -y install tmux rsync
}

install_windows_integration_utils()
{
    echo ".. installing windows integration utilitities"
    apt-get -y install zip unzip dos2unix
}

install_core_dev_utils()
{
    echo ".. installing core development utilities"
    apt-get -y install git ack bat
}

configure_ssh_server()
{
    if [ -z "$SSH_PORT" ]
    then
        return # nothing to configure
    fi

    echo ".. configuring ssh"
    if [ -f /etc/ssh/sshd_config.orig ]
    then
        # recover original
        cp /etc/ssh/sshd_config.orig /etc/ssh/ssh_config
    else
        # save original
        cp -n /etc/ssh/sshd_config /etc/ssh/sshd_config.orig
    fi
    sed -i "s/#Port 22/Port $SSH_PORT/" /etc/ssh/sshd_config
    service sshd restart
    service sshd status
}

load_and_install_dotfiles()
{
    if [ -z "$DOTFILES_REPO_URL" ]
    then
        return # no dotfile repo defined
    fi

    echo ".. cloning dotfiles repo"
    if [ -d dotfiles ]
    then
        cd ~/dotfiles
        git pull origin
    else
        cd
        git clone $DOTFILES_REPO_URL
    fi
    echo ".. installing dotfiles"
    cd
    ./dotfiles/bsdots -b

    if [ -z "$NON_ADMIN_USERNAME" ]
    then
        return # no non admin user
    fi

    echo ".. copying dotfiles repo for non admin user ($NON_ADMIN_USERNAME)"
    if [ -d /home/$NON_ADMIN_USERNAME ]
    then
        rm -rf /home/$NON_ADMIN_USERNAME/dotfiles
    fi
    cp -r dotfiles /home/$NON_ADMIN_USERNAME
    chown -R $NON_ADMIN_USERNAME:$NON_ADMIN_USERNAME /home/$NON_ADMIN_USERNAME/dotfiles
    echo ".. installing non admin user dotfiles"
    su $NON_ADMIN_USERNAME -c "/home/$NON_ADMIN_USERNAME/dotfiles/bsdots -b"
}

gen_ssh_keys_and_set_auth_user()
{
    if [ -z "$NON_ADMIN_USERNAME" ]
    then
        return # no non admin user
    fi

    echo ".. generating SSH keys for non admin user ($NON_ADMIN_USERNAME)"
    KEY_HOME=/home/$NON_ADMIN_USERNAME/.ssh
    rm -f $KEY_HOME/id_rsa
    su $NON_ADMIN_USERNAME -c "ssh-keygen -q -t rsa -N '' -f $KEY_HOME/id_rsa"

    if [ -z "$NON_ADMIN_AUTH_KEY" ]
    then
        if [ -z "$NON_ADMIN_AUTH_KEY_DOTFILES_PATH" ]
        then
            return # no authorized key
        fi
        # use authorized keys in dotfiles
        NON_ADMIN_AUTH_KEY=$(cat "${DOTFILES_REPO}/${NON_ADMIN_AUTH_KEY_DOTFILES_PATH}")
    fi

    echo ".. adding authorized key"
    su $NON_ADMIN_USERNAME -c "echo $NON_ADMIN_AUTH_KEY > $KEY_HOME/authorized_keys"
}

run_config_file_script()
{
    echo ".. running config file script"
    configure_box
}

run_main $@
